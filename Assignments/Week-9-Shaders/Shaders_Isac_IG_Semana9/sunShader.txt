
#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;


// Valor aleatorio en 2D
float random (in vec2 st) {
  return fract(sin(dot(st.xy,
                       vec2(12.9898,78.233)))
               * 43758.5453123);
}

// 2D Noise based on Morgan McGuire (morgan3d)
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 st) {
  vec2 i = floor(st);
  vec2 f = fract(st);

  // Cuatro esquinas de cada mosaico
  float a = random(i);
  float b = random(i + vec2(1.0, 0.0));
  float c = random(i + vec2(0.0, 1.0));
  float d = random(i + vec2(1.0, 1.0));

  // Interpolación con Hemite cúbico
  vec2 u = smoothstep(0.,1.,f);

  // Combina esquinas ponderadas
  return mix(a, b, u.x) +
          (c - a)* u.y * (1. - u.x) +
          (d - b) * u.x * u.y;
}

// Copiado de https://www.shadertoy.com/view/tdBBRV
float fbm ( in vec2 _st) {
    float v = sin(u_time*0.1)*0.1;
    float a = 0.1;
    vec2 shift = vec2(0.,0.);
    // Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.), sin(1.), -sin(1.), acos(0.0));
    for (int i = 0; i < 3; ++i) {
        v += a * noise(_st);
        _st = rot * _st * 2.1 + shift;
        a *= 3.4;
    }
    return v;
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;

  	vec2 coord = st;
    coord.x += 0.2*u_time;
    coord.y += 0.2*u_time;
    
    float len = length(coord) - 3.;     
    
    vec3 color = vec3(0.);

    vec2 q = vec2(0.);
    q.x = fbm( st + 1.0);
    q.y = fbm( st + vec2(-0.450,0.650));

    vec2 r = vec2(0.);
    r.x = fbm( st + 1.0*q + vec2(-0.550,0.500)+ 0.1*u_time );
    r.y = fbm( st + 1.0*q + vec2(0.740,0.050)+ 0.1*u_time);
    
    color = mix(color, cos(len + vec3(0.2, 0.0, 0.5)), 1.0);
    color = mix(vec3(0.730,0.237,0.003), vec3(0.667,0.295,0.005), color);
    
    float f = fbm(st+r);
    gl_FragColor = vec4(1.9*(f*f*f+.6*f*f+.5*f)*color,1.);
}